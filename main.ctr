Broom memoryLimit: 1024 * 1024 * 1024.
import 
    LineIterator
    Preprocessor
    CLIUtils: 'parseCliArguments'.

var config is parseCliArguments run.
(var filenames is config at: 'filenames') isNil ifTrue: {
    thisBlock error: 'No file names provided'.
}.


(var cf is config at: 'config') isNil ifFalse: {{
    config is JSON parse: (File new: cf, read).
} catch: {:e Pen red writeln: '%s :: Expected to find a valid json file at $$cf' % [e], resetColor. Program exit.}, run.}.

var fss is Nil.

var procs is filenames fmap: ({:filename
    var preprocessor is preprocessor new.
    ^Program new: ({:par
        fss is Map new.
        const filename findPattern: ?>^(.*?)\.(.*)$<? do: {:gs
            fss put: gs @ 0 at: 'F'.
            fss put: gs @ 1 at: 'f'.
            fss put: gs @ 2 at: 'e'.
            fss put: Clock new at: 'd'.
        }.
        File new: (config at: 'oformat', %~: fss), write: (
            preprocessor process: filename config: config
        ).
        par message: 'done'.
    } catch: {:e 
        var lineno is Reflect getProperty: 'linenumber' ofObject: preprocessor.
        par message: [const filename, lineno, e].
        Program exit. 
    }).
}).

var fails is Array new.

procs each_v: {:p
    var ret is p join.
    ret = 'done' ifFalse: {
         ret isNil ifFalse: {
             fails push: ret.
         }.
    }.
}.

fails each_v: \:x ['fname', 'lno', 'err'] letEqual: x eval in : {
    Pen red writeln: 'Processing of file %s failed at line %d:\n\t%s' % [fname, lno, (err split: '\n', join: '\n\t')], resetColor.
}.
